---

- name: ensure storage management software is installed
  package: 
    name="{{ item }}"
    state=present
  with_items:
    - gdisk
    - sg3_utils
    - lvm2
  tags:
  - disk_init

## Return Value of failed rescan command not yet tested
- name: rescanning for new disks
  shell: |
   new_disk=0
   if [ ! -b {{ item.key }} ]; then
          /usr/bin/rescan-scsi-bus.sh
          new_disk=1 
          # if disk is not available after scan exit with error
          [ ! -b {{ item.key }} ] && new_disk=2 && echo "ERROR: disk {{ item.key }} not found"
   fi
   exit ${new_disk}
  register: newdisk
  changed_when: newdisk.rc == 1
  failed_when: newdisk.rc > 1
  with_dict: "{{ disks }}"
  tags:
  - disk_init

### TODO: Make this snippet more robust ....
- name: create disk partitions 
  shell: |
   if pvdisplay -C '{{ item.key }}'1 ; then
       echo '{{ item.key }}' in use
       exit 0
   else
       sgdisk --zap {{ item.key }}
       parted -s -a optimal '{{ item.key }}' mklabel msdos && parted -s -a optimal -- '{{ item.key }}' unit compact mkpart primary ext3 "1" "-1" &&  parted -s -a optimal -- '{{ item.key }}' set 1 lvm on
      /sbin/pvcreate '{{ item.key }}'1
      exit 90
   fi
  with_dict: "{{ disks }}"
  register: pvcreate_result
  changed_when: pvcreate_result.rc == 90
  failed_when: pvcreate_result.rc > 0 and pvcreate_result.rc != 90
  tags:
    - disk_init

# TODO: set_fact -> figure out all pvs in a volume-group (new & old)
# at this point all disks are configured that belong to a volume group and may be assigned
# - pvs displays available disks (Ist Zustand)
# - {{ disks }} (Sollzustand)
# New volume module does no longer extend, if vg already exists. 
# so we need to create a new dict of the following format
#
# volumegroups:
#   - {{ vg1 , "disklist" }}
#   - {{ vg2 , "disklist" }}

# currently this fails
#- name: create volume groups on it
#  lvg: 
#   state=present
#    vg="{{ item.value }}"
#    pvs="{{ item.key }}1"
#  with_dict: "{{ disks }}"
#  tags:
#  - disk_init
  
- name: create or extend volumegroups
  shell: |
    # Returncodes
    # 0  : setup/change successful
    # 90 : nothing changed
    # >0 : failed
    rc=0
    if vgs --noheadings -o vg_name,pv_name | grep -q {{ item.value }}; then
      #extend disk if not yet in disk group
      if vgs --noheadings -o vg_name,pv_name {{ item.value }} | grep -q {{ item.key }}1; then
         # disk already in this diskgroup
         rc=90
      else
         if [ -z "$(pvs --noheadings -o vg_name {{ item.key }}1| tr -d ' ')" ]; then 
             /usr/sbin/vgextend {{ item.value }} {{ item.key }}1
             rc=$?
         else
             ## possible to try vgreduce and vgextend on the disk
             echo "ERROR: disk {{ item.key }}1 already used in other diskgroup"
             rc=7
         fi
      fi
    else 
      /usr/sbin/vgcreate {{ item.value }} {{ item.key }}1
      rc=$?
    fi
    echo "RETURNCODE: $rc"
    exit $rc
  register: vgcreate_result
  changed_when: vgcreate_result.rc == 0
  failed_when: vgcreate_result.rc > 0 and vgcreate_result.rc != 90
  with_dict: "{{ disks }}"
  tags:
    - disk_init

- name: create logical volumes 
  lvol: 
    state: present 
    vg: "{{ item.value.vol }}"
    lv: lv_{{ item.key }}
    size: "{{ item.value.size }}"
  with_dict: "{{ logvols }}"
  tags:
    - disk_init
  when: ( logvols is defined ) 

- name: create filesystems
  filesystem:
    dev:  /dev/{{ item.value.vol}}/lv_{{ item.key }}
    fstype: "{{ item.value.fstype | default('xfs')}}"
    force: no
    opts: "{{ item.value.opts | default(omit) }}"
  with_dict: "{{ logvols }}"
  ignore_errors: True
  tags:
    - disk_init
  when: logvols is defined

- name: mount and make fstab entries
  mount:
    name: "{{ item.value.mountpoint }}"
    fstype: xfs
    opts: defaults
    passno: 4
    src: "/dev/{{ item.value.vol }}/lv_{{ item.key }}"
    state: mounted
  with_dict: "{{ logvols }}"
  tags:
    - disk_init
  when: logvols is defined

...
